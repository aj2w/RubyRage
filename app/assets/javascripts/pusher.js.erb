
// Enable pusher logging - don't include this in production
Pusher.log = function(message) {
  if (window.console && window.console.log) {
    window.console.log(message);
  }
};

//////////////////////////////////////////////////////////////////////////////
// DEFINE USER'S CHANNEL
//////////////////////////////////////////////////////////////////////////////

var pusher = new Pusher('<%= Pusher.key %>');
var username = $('.menubar_user').text();
var usernameWithNoSpaces = username.replace(/^\s+|\s+$/g, "");
var myOwnChannel = pusher.subscribe(usernameWithNoSpaces);

myOwnChannel.bind('gameBroadcast', function(rawGameboardData) {
  var atOpponentGameboard = rubyRageBattleMode.returnCtxOpponentGameboard();
  var atOpponentPreview = rubyRageBattleMode.returnCtxOpponentPreview();
  var reassembledGameboard = rubyRageBattleMode.reassembleTwoDimArray(rawGameboardData.mySittingRubymonsPosition);
  var reassembledCurrentRubyBox = rubyRageBattleMode.reassembleTwoDimArray(rawGameboardData.myFallingRubymonsPosition);
  var reassembledUpcomingRubymonPair = _.map(rawGameboardData.myUpcomingRubymonPair,
    function(string) {
      return parseInt(string);
    }
  );
  var myCurrentXposition = parseInt(rawGameboardData.myCurrentXposition);
  var myCurrentYposition = parseInt(rawGameboardData.myCurrentYposition);
  rubyRageBattleMode.paintOverOpponents( atOpponentGameboard, atOpponentPreview);
  rubyRageBattleMode.renderOpponentsSittingRubymons( reassembledGameboard, atOpponentGameboard);
  rubyRageBattleMode.renderOpponentsFallingRubymons( reassembledCurrentRubyBox , atOpponentGameboard, myCurrentXposition, myCurrentYposition);
  rubyRageBattleMode.renderOpponentsNextRubymons( reassembledUpcomingRubymonPair, atOpponentPreview);
});

myOwnChannel.bind('promptRequestPopup', function(data) {
  var response = confirm(data.message);
  if (response === true) {
    console.log(data.challengerChannelName);
    window.location.replace('/games/multi/' + data.challengerChannelName);
    $('#channel-name').remove()
  } else {
    console.log("You pressed cancel!");
  }
});

//////////////////////////////////////////////////////////////////////////////
// GRAB OPPONENT'S USERID (/ CHANNEL NAME)
//////////////////////////////////////////////////////////////////////////////

var rawOpponentChannelName = $('#channel-name').text();
var opponentChannelName = rawOpponentChannelName.replace(/^\s+|\s+$/g, "");

//////////////////////////////////////////////////////////////////////////////
// BATTLE RELATED EVENTS & FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

$('#battle-button').click(function(){
  // startSendingRequest();
  setInterval(startSendingRequest, 300);
})

$('.battle-now').click(function(){
  console.log("hello")
})

function startSendingRequest() {
  $.ajax({
    url: "/games/gameBroadcast",
    type: "post",
    dataType: "json",
    data: {"opponentChannelName": opponentChannelName,
           "mySittingRubymonsPosition": gameboardInplay,
           "myFallingRubymonsPosition": currentRubyBox,
           "myCurrentXposition": currentX,
           "myCurrentYposition": currentY,
           "myUpcomingRubymonPair": rubymonPairsPreset[runningRubymonIndex]}
  })
}

function requestBattle() {
  $.ajax({
    url: "/games/multi/requestBattle",
    type: "post",
    dataType: "json",
    data: {"opponentChannelName": opponentChannelName,
           "challengerChannelName": usernameWithNoSpaces}
  })
}

$( '#channel-name' ).ready(function() {
  requestBattle();
});


